import org.apache.tools.ant.filters.*

buildscript {
    ext.kotlin_version = '1.2.10'

    repositories {
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url 'http://dl.bintray.com/jetbrains/intellij-plugin-service'
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.3.3"
}

processResources {
    filesMatching('**/ApplicationInsights.xml') {
        filter(ReplaceTokens, tokens: ["applicationinsights.key": project.property("applicationinsights.key")])
    }
}

dependencies {
    compile fileTree(dir: '../AddLibrary/AzureLibraries/com.microsoft.azuretools.sdk/dependencies', include: ['applicationinsights-management-1.0.3.jar'])
    compile 'com.microsoft.sqlserver:mssql-jdbc:6.1.0.jre8'
    compile 'commons-io:commons-io:2.5'
    compile 'com.microsoft.azure:azure-client-runtime:1.5.0', { force = true }
    compile 'com.microsoft.azure:azure-client-authentication:1.5.0', { force = true }
    compile 'com.microsoft.azuretools:azuretools-core:3.8.0', {
        exclude group: "com.microsoft.azure", module: "azure-client-authentication"
        exclude group: "com.microsoft.azure", module: "azure-client-runtime"
    }
    compile 'com.microsoft.azuretools:azure-explorer-common:3.8.0', {
        exclude group: "com.microsoft.azure", module: "azure-client-authentication"
        exclude group: "com.microsoft.azure", module: "azure-client-runtime"
    }
    compile 'com.microsoft.azuretools:spark-tools:0.1.0'
    compile 'com.microsoft.azuretools:hdinsight-node-common:3.8.0', {
        exclude group: "com.microsoft.azure", module: "azure-client-authentication"
        exclude group: "com.microsoft.azure", module: "azure-client-runtime"
    }
    compile 'com.spotify:docker-client:8.6.2'
}

configurations {
    compile.exclude module: 'slf4j-api'
}

allprojects {
    apply plugin: "kotlin"
    apply plugin: 'org.jetbrains.intellij'
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'

    group 'com.microsoft.azuretools'

    repositories {
        maven { url new File(rootProject.projectDir, '../../.repository').toURI() } // to snap to the private maven repo on Jenkins if any
        mavenLocal()
        mavenCentral()
    }

    compileJava {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
    }

    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

    checkstyle {
        toolVersion = '7.7'
        configFile = new File(rootProject.projectDir, 'config/checkstyle/checkstyle.xml')
        showViolations = false
    }

    findbugs {
        toolVersion = "3.0.1"
        ignoreFailures = true
    }

    intellij {
        switch (build_common_code_with) {
            case "rider":
                version = rider_version
                break
            case "idea":
                version = idea_version
                break
            default:
                throw new Exception("Unsupported value for build_common_code_with: " + build_common_code_with)
        }

        updateSinceUntilBuild = Boolean.valueOf(updateVersionRange)
        downloadSources = Boolean.valueOf(sources)
    }

    instrumentCode {
        // javac2 is required to compile .form files from IntelliJ IDEA UI Designer
        // Since Rider distribution does not contain it, take it from IDEA
        javac2 {
            "${project(":idea").extensions.getByName("intellij").ideaDependency.classes}/lib/javac2.jar"
        }
    }

    sourceSets {
        main {
            java.srcDirs 'src'
            resources.srcDirs 'resources'
        }
        test {
            java {
                srcDir 'test/java'
            }
            resources {
                srcDir 'test/resources'
            }
        }
    }

    test {
        testLogging.showStandardStreams = true
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

defaultTasks 'buildPlugin', 'test'
